#!groovy

def launchUnitTests = "yes"
def launchIntegrationTests = "yes"

class Globals {
    static pimVersion = "2.0"
    static extensionBranch = "2.0.x-dev"
}

stage("Checkout") {
    milestone 1
    if (env.BRANCH_NAME =~ /^PR-/) {
        userInput = input(message: 'Launch tests?', parameters: [
            choice(choices: 'yes\nno', description: 'Run unit tests', name: 'launchUnitTests'),
            choice(choices: 'yes\nno', description: 'Run integration tests', name: 'launchIntegrationTests'),
        ])

        launchUnitTests = userInput['launchUnitTests']
        launchIntegrationTests = userInput['launchIntegrationTests']
    }
    milestone 2

    podPHP( "7.1", {
        deleteDir()
        checkout scm
        stash "extended_attributes"

        checkout([$class: 'GitSCM',
             branches: [[name: "${Globals.pimVersion}"]],
             userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-community-standard.git']]
        ])
        stash "pim_community"

       checkout([$class: 'GitSCM',
         branches: [[name: "${Globals.pimVersion}"]],
         userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/akeneo/pim-enterprise-standard.git']]
       ])
       stash "pim_enterprise"
   })
}

if (launchUnitTests.equals("yes")) {
    stage("Unit tests") {
        def tasks = [:]

        tasks["phpspec-7.1"] = {runPhpSpecTest("7.1")}
        tasks["php-cs-fixer-7.1"] = {runPhpCsFixerTest("7.1")}

        parallel tasks
    }
}

if (launchIntegrationTests.equals("yes")) {
    stage("Integration tests") {
        def tasks = [:]

        tasks["phpunit-7.1-ce"] = {runIntegrationTestCe("7.1")}
        tasks["phpunit-7.1-ee"] = {runIntegrationTestEe("7.1")}

        parallel tasks
    }
}

def podPHP(phpVersion, body) {
    def podName = "ExtendedAttributeTypeBundle-" + UUID.randomUUID().toString()
    podTemplate(label: podName, containers: [
        containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "akeneo/php:${phpVersion}", resourceRequestCpu: '100m', resourceRequestMemory: '1000Mi',
            envVars: [
                envVar(key: "COMPOSER_HOME", value: "${env.WORKSPACE}/.composer"),
            ]        
        ),    
    ]) {  
        node(podName) {
            container("php") {
                body()
            }
        }
    }
}

def runPhpSpecTest(version) {
    podPHP(version, {
        try {
            unstash "extended_attributes"

            sh "composer install --optimize-autoloader --no-interaction --no-progress --prefer-dist"
            sh "mkdir -p aklogs/"
            sh "./bin/phpspec run --no-interaction --format=junit > aklogs/phpspec.xml"
        } finally {
            sh "sed -i \"s/testcase name=\\\"/testcase name=\\\"[php-${version}] /\" aklogs/*.xml"
            junit "aklogs/*.xml"
        }
    })
}

def runPhpCsFixerTest(version) {
    podPHP(version, {
        try {
            unstash "extended_attributes"

            sh "composer install --optimize-autoloader --no-interaction --no-progress --prefer-dist"
            sh "mkdir -p aklogs/"
            sh "./bin/php-cs-fixer fix --diff --format=junit --config=.php_cs.php > aklogs/phpcs.xml"
        } finally {
            sh "sed -i \"s/testcase name=\\\"/testcase name=\\\"[php-${version}] /\" aklogs/*.xml"
            junit "aklogs/*.xml"
        }
    })
}

def podIntegration(phpVersion, body) {
    def podName = "ExtendedAttributeTypeBundle-" + UUID.randomUUID().toString()
    withCredentials([string(credentialsId: 'composer-token', variable: 'token')]) {
        podTemplate(label: podName, containers: [
            containerTemplate(name: "elasticsearch", ttyEnabled: true, command: 'cat', image: "elasticsearch:5.5", resourceRequestCpu: '100m', resourceRequestMemory: '200Mi',
                envVars: [
                    envVar(key: "ES_JAVA_OPTS", value: "-Xms512m -Xmx256m"),
                    envVar(key: "FORCE", value: "true"),
                    ]        
            ),
            containerTemplate(name: "mysql", ttyEnabled: true, command: 'cat', image: "mysql:5.7", resourceRequestCpu: '100m', resourceRequestMemory: '200Mi', 
                envVars: [
                    envVar(key: "MYSQL_ROOT_PASSWORD", value: "root"),
                    envVar(key: "MYSQL_USER", value: "akeneo_pim"),
                    envVar(key: "MYSQL_PASSWORD", value: "akeneo_pim"),
                    envVar(key: "MYSQL_DATABASE", value: "akeneo_pim"),
                ], volumes: [

                    emptyDirVolume(memory: false, mountPath: "/var/lib/mysql"),
                    emptyDirVolume(memory: false, mountPath: "/tmp")
                ]
            
            ),
            containerTemplate(name: "php", ttyEnabled: true, command: 'cat', image: "akeneo/php:${phpVersion}", resourceRequestCpu: '100m', resourceRequestMemory: '1000Mi',
                envVars: [
                    envVar(key: "COMPOSER_HOME", value: "${env.WORKSPACE}/.composer"),
                    envVar(key: "COMPOSER_AUTH", value: "{\"github-oauth\":{\"github.com\": \"$token\"}}")
                ]        
            ),    
        ]) { 
            node(podName) {
                container("php") {
                    body()
                }
            }
        }
    }
}

def runIntegrationTestCe(version) {
    podIntegration(version, {
        try {
                unstash "pim_community"

                sh "composer require phpunit/phpunit akeneo/extended-attribute-type:${Globals.extensionBranch} --no-interaction --no-progress --prefer-dist"
                dir("vendor/akeneo/extended-attribute-type") {
                    unstash "extended_attributes"
                }
                sh 'composer dump-autoload -o'

                sh "cp vendor/akeneo/extended-attribute-type/Tests/Resources/Jenkins/config/parameters_test.yml app/config/parameters_test.yml"

                sh "sed -i 's#// your app bundles should be registered here#\\0\\nnew Pim\\\\Bundle\\\\ExtendedAttributeTypeBundle\\\\PimExtendedAttributeTypeBundle(),#' app/AppKernel.php"
                sh "cat app/AppKernel.php"


                sh "rm ./var/cache/* -rf"
                sh "./bin/console --env=test pim:install --force"
                sh "mkdir -p app/build/logs/"
                sh "./vendor/bin/phpunit -c app/ --log-junit app/build/logs/phpunit.xml  vendor/akeneo/extended-attribute-type/Tests"
        } finally {
            sh "sed -i \"s/testcase name=\\\"/testcase name=\\\"[php-${version}] /\" app/build/logs/*.xml"
            junit "app/build/logs/*.xml"
        }
    })
}

def runIntegrationTestEe(version) {
    podIntegration(version, {
        try {
                unstash "pim_enterprise"

                sh "composer require phpunit/phpunit akeneo/extended-attribute-type:${Globals.extensionBranch} --no-interaction --no-progress --prefer-dist"
                dir("vendor/akeneo/extended-attribute-type") {
                    unstash "extended_attributes"
                }
                sh 'composer dump-autoload -o'

                sh "cp vendor/akeneo/extended-attribute-type/Tests/Resources/Jenkins/config/parameters_test_ee.yml app/config/parameters_test.yml"

                sh "sed -i 's#// your app bundles should be registered here#\\0\\nnew Pim\\\\Bundle\\\\ExtendedAttributeTypeBundle\\\\PimExtendedAttributeTypeBundle(),#' app/AppKernel.php"

                sh "rm ./var/cache/* -rf"
                sh "./bin/console --env=test pim:install --force"
                sh "mkdir -p app/build/logs/"
                sh "./vendor/bin/phpunit -c app/ --log-junit app/build/logs/phpunit.xml  vendor/akeneo/extended-attribute-type/Tests"
        } finally {
            sh "sed -i \"s/testcase name=\\\"/testcase name=\\\"[php-${version}] /\" app/build/logs/*.xml"
            junit "app/build/logs/*.xml"
        }
    })
}
